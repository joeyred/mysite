.doc-nav-pane{background:#333}.doc-nav-pane[data-responsive-state=active] .pane-content{text-align:center}.doc-nav-pane[data-responsive-state=active] .nav-header h1{padding-top:44px;padding-top:2.75rem}.doc-nav-pane[data-responsive-state=inactive]{position:relative;width:20%}.doc-nav-pane[data-responsive-state=inactive] .pane-header{display:none}.doc-nav-pane[data-responsive-state=inactive] .pane-content{position:fixed;top:0;width:20%;background:#333;height:100vh;overflow-y:scroll}.doc-nav-pane[data-responsive-state=inactive] .nav-header h1{position:fixed;width:20%}.doc-nav-pane[data-responsive-state=inactive] .collection-nav{padding-top:104px;padding-top:6.5rem}.doc-nav-pane .nav-header h1{padding-top:44px;padding-top:2.75rem;font-size:24px;font-size:1.5rem;background:#ff664e;color:#222;padding:15px;padding:.9375rem;margin-left:-15px;margin-left:-.9375rem;margin-right:-15px;margin-right:-.9375rem;margin-bottom:0}.doc-nav-pane .nav-header h1 a{color:#222}.doc-nav-pane h2{font-size:20.8px;font-size:1.3rem;padding:15px;padding:.9375rem;margin-left:-15px;margin-left:-.9375rem;margin-right:-15px;margin-right:-.9375rem;background:#222}.doc-nav-pane h3{font-size:19.2px;font-size:1.2rem;margin-bottom:8px;margin-bottom:.5rem}.doc-nav-pane ul{padding-left:16px;padding-left:1rem;margin-bottom:16px;margin-bottom:1rem}p{max-width:640px;max-width:40rem}p:last-child{margin-bottom:0}article header .titled-callout{max-width:700px;max-width:43.75rem}article header .titled-callout .titled-callout-content{font-size:20.8px;font-size:1.3rem}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */