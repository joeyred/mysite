"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}!function(){var t={modules:{},_hyphenate:function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()},registerModule:function(t,e,n,i){var o=3<arguments.length&&void 0!==i&&i;e=e||t.prototype.constructor.name,n=n||this._hyphenate(e),this.modules[e]={name:e,dataAttr:"data-".concat(n),dataAttrTarget:"[data-".concat(n,"]"),jquery:o},this[e]=t}};window.Gingabulous=t}(),Gingabulous.animations={},Gingabulous.registerAnimation=function(t,e,n){var i=2<arguments.length&&void 0!==n?n:null;if(Gingabulous.animations[t])throw new Error("YA DUN FUCKED UP BITCH, THEMS NAMES IS RESEVRED. READ THE SIGN DUMMY.");Gingabulous.animations[t]={setup:i,animate:e}},Gingabulous.animationSeries=function(o,t,s){for(var e=arguments.length,a=new Array(3<e?e-3:0),n=3;n<e;n++)a[n-3]=arguments[n];for(var r=0,l=null,u={base:t,current:null,previous:null},c={current:0,previousStep:null,total:0},h=[],i=0;i<a.length;i++)c.total+=a[i][1],h.push(!1);console.log(c.total),s&&s.before&&s.before(o),window.requestAnimationFrame(function t(e){var n=e-(l=l||e);if(o.classList.add("animation_in-progress"),s&&s.beforeEachFrame&&s.beforeEachFrame(o),n>=c.current&&!1===h[r]){s&&s.beforeEachStep&&s.beforeEachStep(o);var i=a[r][2]||!1;u.current=a[r][0],u.previous&&o.classList.remove("animation_".concat(u.base,"_").concat(u.previous)),o.classList.add("animation_".concat(u.base,"_").concat(u.current)),i&&i(o),u.previous=a[r][0],h[r]=!0,r!==a.length&&(c.current+=a[r][1]),s&&s.afterEachStep&&s.afterEachStep(o),r++}s&&s.afterEachFrame&&s.afterEachFrame(o),n<c.total?window.requestAnimationFrame(t):(s&&s.after&&s.after(o),o.classList.remove("animation_in-progress"),o.classList.remove("animation_".concat(u.base,"_").concat(u.current)))})},Gingabulous.breakpoints={sm:0,md:40,lg:64,xl:75,xxl:90},Gingabulous.setBreakpoints=function(t){Gingabulous.breakpoints=t},Gingabulous.activeBreakpoint=function(){var t,e=function(t){var e=document.querySelector("html");return t/parseFloat(getComputedStyle(e)["font-size"])}(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth),n=0;for(var i in Gingabulous.breakpoints)if({}.hasOwnProperty.call(Gingabulous.breakpoints,i)){if(n++,Gingabulous.breakpointArray.length===n)return i;if(e>Gingabulous.breakpoints[i]){t=i;continue}return t}},Gingabulous.breakpointArray=function(t){var e=[];for(var n in t)!{}.hasOwnProperty.call(t,n)||e.push(n);return e}(Gingabulous.breakpoints),function(){var t=function(){function i(t){_classCallCheck(this,i),this.moduleName=t}return _createClass(i,[{key:"_isDebugEnabled",value:function(){return!(!Gingabulous.debugConfig[this.moduleName]||!Gingabulous.debugConfig.globalDebug)}},{key:"_addSuffixToNumber",value:function(t){var e=t%10,n=t%100;return 1==e&&11!=n?t+"st":2==e&&12!=n?t+"nd":3==e&&13!=n?t+"rd":t+"th"}},{key:"_valueType",value:function(t){return _typeof(t)}},{key:"_outputValues",value:function(t){for(var e in t)Object.hasOwnProperty.call(t,e)&&console.log(e+" is: ",t[e]," ("+this.valueType(t[e])+")")}},{key:"_outputObjectParent",value:function(){console.log("%c "+this.objectName,"color: green")}},{key:"functionReturn",value:function(t,e){this._isDebugEnabled()&&(this._outputObjectParent(),"undefined"===e?console.log(t+" has been called. Function has no return"):console.log(t+" has been called. Returned: "+e))}},{key:"values",value:function(t,e){this._isDebugEnabled()&&(this._outputObjectParent(),console.log("%c Within "+t+":","color: purple"),this._outputValues(e))}},{key:"loop",value:function(t,e,n){if(this._isDebugEnabled())if(console.log("%c Within "+t+":","color: purple"),"number"==typeof e){var i=this._addSuffixToNumber(e+1);console.log(i+" iteration of for loop:"),this._outputValues(n)}else console.log("current key in forin: "+e),this._outputValues(n)}},{key:"message",value:function(t){this._isDebugEnabled()&&console.log("%c ".concat(t),"color: blue")}}],[{key:"moduleDebugValues",value:function(t){return Gingabulous.extend({},function(){var t={};for(var e in Gingabulous.modules)Object.hasOwnProperty.call(Gingabulous.modules,e)&&(t[Gingabulous.modules[e].name]=!1);return t}(),t)}},{key:"config",value:function(t,e){var n={globalDebug:t};Gingabulous.debugConfig=Gingabulous.extend({},n,i.moduleDebugValues(e))}}]),i}();Gingabulous.Debug=t}(),function(){var t=function(){function n(t,e){_classCallCheck(this,n),this.element=t,this.listener=e,this.callbacks=[],this.registered=!1}return _createClass(n,[{key:"_handler",value:function(){if(0<this.callbacks.length)for(var t=0;t<this.callbacks.length;t++)this.callbacks[t]()}},{key:"_registerEventListener",value:function(){var t=this;this.element.addEventListener(this.listener,function(){return t._handler()})}},{key:"registerCallback",value:function(t){if("function"!=typeof t)throw new TypeError("callback must be a function, not a ".concat(_typeof(t)));this.callbacks.push(t),0<this.callbacks.length&&!this.registered&&(this._registerEventListener(),this.registered=!0)}}]),n}();Gingabulous.events={},Gingabulous.registerGlobalEventListener=function(t,e,n){n=t||n,void 0===Gingabulous.events[t]&&(Gingabulous.events[t]=new Gingabulous.EventListener(e,n))},Gingabulous.EventListener=t}(),Gingabulous.extend=function(t){t=t||{};for(var e=1;e<arguments.length;e++)if(arguments[e])for(var n in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],n)&&(t[n]=arguments[e][n]);return t},Gingabulous.deepExtend=function t(e){e=e||{};for(var n=1;n<arguments.length;n++){var i=arguments[n];if(i)for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&("object"===_typeof(i[o])?e[o]=t(e[o],i[o]):e[o]=i[o])}return e},function(){var t=function(){function n(t,e){_classCallCheck(this,n),this.element=t,this.options=Gingabulous.deepExtend(n.defaults(),e),this.xhr=new XMLHttpRequest,this.api,this.activeContent,this._init(),console.log(this)}return _createClass(n,[{key:"_init",value:function(){this._ajax()}},{key:"_traverseObject",value:function(t,e){for(var n=t.split("."),i=e,o=0;o<n.length;o++)i=i[n[o]];return i}},{key:"_loadAPI",value:function(){4===this.xhr.readyState&&(this.api=JSON.parse(this.xhr.responseText))}},{key:"_ajax",value:function(){var t=this;this.xhr.onreadystatechange=function(){return t._loadAPI()},this.xhr.open("GET",this.element.getAttribute(this.attr.api)),this.xhr.send()}},{key:"_injectContent",value:function(){for(var t=0;t<this.boundElements.length;t++){var e=this.boundElements[t].getAttribute(this.attr.bind);this.boundElements[t].innerHTML=this._traverseObject(e,this.activeContent)}}},{key:"updateContent",value:function(t){this.activeContent=this._traverseObject(t,this.api),this._injectContent()}},{key:"attr",get:function(){return{container:"".concat(this.options.dataAttr,"-container"),content:"".concat(this.options.dataAttr,"-content"),api:"".concat(this.options.dataAttr,"-api"),bind:"".concat(this.options.dataAttr,"-bind")}}},{key:"boundElements",get:function(){return this.element.querySelectorAll("[".concat(this.attr.bind,"]"))}}],[{key:"defaults",value:function(){return{dataAttr:"data-inject",onLoad:!0}}}]),n}();Gingabulous.Inject=t}(),function(){var t=function(){function e(t){_classCallCheck(this,e),this.element=t,this.valueString=t.getAttribute("data-responsive"),this.breakpoints=Gingabulous.breakpoints,this.breakpointArray=Gingabulous.breakpointArray,this.windowWidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this._setState(),this._onResize()}return _createClass(e,[{key:"_isAKey",value:function(t){for(var e in this.breakpoints)if(t===e)return!0;return!1}},{key:"_parseParam",value:function(t){var e=[];if(this._isAKey(t))return e.push(t),e;var n=t.split("-"),i=n[0];if("only"===n[1])return e.push(i),e;for(var o in this.breakpointArray)!{}.hasOwnProperty.call(this.breakpointArray,o)||("up"===n[1]&&this._indexOfQuery(n[0])<=o&&e.push(this.breakpointArray[o]),"down"===n[1]&&this._indexOfQuery(n[0])>=o&&e.push(this.breakpointArray[o]));return e}},{key:"_parseArray",value:function(t,e){var n=t,i=!1;for(var o in e)if({}.hasOwnProperty.call(e,o)){for(var s in i=!1,t)e[o]===t[s]&&(i=!0);i||n.push(e[o])}return n}},{key:"_indexOfQuery",value:function(t){for(var e in this.breakpointArray)if(this.breakpointArray[e]===t)return e}},{key:"_setState",value:function(){var t;t=this.queryValues[Gingabulous.activeBreakpoint()]?"active":"inactive",this.element.setAttribute("data-responsive-state",t)}},{key:"_onResize",value:function(){var t=this;Gingabulous.events.resize||Gingabulous.registerGlobalEventListener("resize",window),Gingabulous.events.resize.registerCallback(function(){return t._setState()})}},{key:"isActive",value:function(){return this.queryValues[Gingabulous.activeBreakpoint()]}},{key:"windowWidthWasResized",value:function(){var t=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,e=!1;return t!==this.windowWidth&&(e=!0),this.windowWidth=t,e}},{key:"valuesArray",get:function(){return void 0===this.valueString||null===this.valueString?[]:this.valueString.split(" ")}},{key:"enabledQueries",get:function(){var t=[];if(this.valuesArray.length<=0)return this.breakpointArray;for(var e in this.valuesArray)if({}.hasOwnProperty.call(this.valuesArray,e)){var n=this._parseParam(this.valuesArray[e]);t=this._parseArray(t,n)}return t}},{key:"queryValues",get:function(){var t={};for(var e in this.breakpoints)if({}.hasOwnProperty.call(this.breakpoints,e))for(var n in t[e]=!1,this.enabledQueries)e===this.enabledQueries[n]&&(t[e]=!0);return t}}]),e}();Gingabulous.Responsive=t}(),function(){var t=function(){function t(){_classCallCheck(this,t),this.lastScrollPosition=0,this.lastScrollDirection=0,this.i=0,this.scrollingDirection=0,this._event()}return _createClass(t,[{key:"_update",value:function(){var t=window.pageYOffset||document.documentElement.scrollTop;t>this.lastScrollPosition?0!==this.lastScrollDirection&&(this.i+=1,10<=this.i&&(this.i=0,this.lastScrollDirection=0)):1!==this.lastScrollDirection&&(10<=this.i&&(this.i=0,this.lastScrollDirection=1),this.i+=1),this.lastScrollPosition=t}},{key:"_event",value:function(){var t=this;Gingabulous.events.scroll.registerCallback(function(){return t._update()})}},{key:"down",value:function(){return 0===this.lastScrollDirection}},{key:"up",value:function(){return 1===this.lastScrollDirection}}]),t}();Gingabulous.ScrollDirection=t}(),function(){var t=function(){function n(t,e){_classCallCheck(this,n),this.element=t,this.options=Gingabulous.deepExtend({},this.defaults,e),this.scrollDirection=new Gingabulous.ScrollDirection,this.content=document.querySelector(this.options.contentTarget)}return _createClass(n,[{key:"init",value:function(){this._setLayerHeight(),this._events()}},{key:"_setLayerHeight",value:function(){for(var t=this.element.querySelectorAll(".layer"),e=0;e<t.length;e++)t[e].style.height=this.calculatedLayerHeight}},{key:"_syncScrolling",value:function(){var t=window.pageYOffset||document.documentElement.scrollTop;!1===this.options.scrollRatio?this.element.scrollTop=t:this.element.scrollTop=t/this.options.scrollRatio}},{key:"_events",value:function(){var t=this;Gingabulous.events.scroll.registerCallback(function(){return t._syncScrolling()})}},{key:"defaults",get:function(){return{dataAttr:Gingabulous.modules.Background.dataAttr,contentTarget:".site-wrapper",scrollRatio:5}}},{key:"calculatedLayerHeight",get:function(){return!1===this.options.scrollRatio?this.content.offsetHeight:this.content.offsetHeight/3}}]),n}();Gingabulous.registerModule(t,"Background"),Gingabulous.registerGlobalEventListener("scroll",document)}(),function(){var t=function(){function n(t,e){_classCallCheck(this,n),this.element=t,this.options=Gingabulous.deepExtend({},n.defaults(),e),this.uid=Math.round(Math.pow(32,7)-Math.random()*Math.pow(32,6)).toString(),this.responsive=new Gingabulous.Responsive(t),this.animation=!!t.hasAttribute("data-animation")&&t.getAttribute("data-animation")}return _createClass(n,[{key:"init",value:function(){this._setUID(),this.responsive.isActive()?this._setState(this.options.defaultState):this._setState(this.options.inactiveState),this.animation&&null!==Gingabulous.animations[this.animation].setup&&Gingabulous.animations[this.animation].setup(this.element),this._events()}},{key:"_setUID",value:function(){this.element.setAttribute(this.attr.uid,this.uid),this.element.querySelector("[".concat(this.attr.open,"]")).setAttribute(this.attr.open,this.uid),this.element.querySelector("[".concat(this.attr.close,"]")).setAttribute(this.attr.close,this.uid)}},{key:"_setState",value:function(t){this.element.setAttribute(this.attr.expand,t)}},{key:"_onResize",value:function(){this.responsive.windowWidthWasResized()&&(this.responsive.isActive()&&this.element.getAttribute(this.attr.expand)!==this.options.defaultState&&this._setState(this.options.defaultState),this.responsive.isActive()||this.element.getAttribute(this.attr.expand)!==this.options.inactiveState&&this._setState(this.options.inactiveState))}},{key:"_eventMatches",value:function(n,t){var i=this,e=this.element.querySelector("[".concat(n,"]")),o=!1,s=!1;if(t.target.hasAttribute(n)&&t.target.getAttribute(n)===this.uid&&(o=!0),e.contains(t.target))if(t.target.path){for(var a=0;a<t.path.length;a++)if(t.path[a].hasAttribute(n)&&t.path[a].getAttribute(n)===this.uid){s=!0;break}}else!function t(e){e.hasAttribute(n)&&e.getAttribute(n)===i.uid?s=!0:t(e.parentNode)}(t.target);return o||s}},{key:"_events",value:function(){var e=this;Gingabulous.events.resize||Gingabulous.registerGlobalEventListener("resize",window),Gingabulous.events.resize.registerCallback(function(){return e._onResize()}),this.element.addEventListener("click",function(t){console.log(t),e.responsive.isActive()&&(e._eventMatches(e.attr.open,t)&&(e._setState(e.options.states.expanded),e.animation&&Gingabulous.animations[e.animation].animate(e.element)),e._eventMatches(e.attr.close,t)&&(e._setState(e.options.states.collapsed),e.animation&&Gingabulous.animations[e.animation].animate(e.element)))})}},{key:"classes",get:function(){return{expand:this.options.class}}},{key:"attr",get:function(){return{expand:this.options.dataAttr,uid:"".concat(this.options.dataAttr,"-uid"),open:"".concat(this.options.dataAttr,"-open"),close:"".concat(this.options.dataAttr,"-close"),content:"".concat(this.options.dataAttr,"-content")}}}],[{key:"defaults",value:function(){return{dataAttr:Gingabulous.modules.Expand.dataAttr,class:"expandable",type:"basic",defaultState:"collapsed",inactiveState:"inactive",states:{expanded:"expanded",collapsed:"collapsed"},animation:null}}}]),n}();Gingabulous.registerModule(t,"Expand")}(),function(){var e=function(){function n(t,e){_classCallCheck(this,n),this.element=t,this.origin=this._getOrigin(),this.position=this.origin,this.classes=e.classes,this._isDynamic()&&(this.inject=new Gingabulous.Inject(t)),this.scrollPosition=0,this.responsive=new Gingabulous.Responsive(t),this.debug=new Gingabulous.Debug("Pane"),this._init()}return _createClass(n,[{key:"_init",value:function(){this.element.classList.add(this.classes.frozen,this.classes.fixed),this.element.classList.add(this._getOrderClass(this.originClass))}},{key:"_isDynamic",value:function(){return!!this.element.hasAttribute("data-inject-api")}},{key:"_getOrigin",value:function(){return this.element.classList.contains("right")?[1,0]:this.element.classList.contains("above")?[0,-1]:this.element.classList.contains("below")?[0,1]:[-1,0]}},{key:"_getPositionClass",value:function(t){var e=[];return-1===t[1]&&e.push(this.classes.above),1===t[1]&&e.push(this.classes.below),-1===t[0]&&e.push(this.classes.left),1===t[0]&&e.push(this.classes.right),(0!==t[0]||0!==t[1])&&(2<=e.length?e.join("-"):e.toString())}},{key:"_getOrderClass",value:function(t){return"".concat(t||this.originClass,"-order")}},{key:"_storeScrollPosition",value:function(){this.scrollPosition=window.pageYOffset||document.documentElement.scrollTop,this.debug.message("stored: ".concat(this.scrollPosition))}},{key:"_restoreScrollPosition",value:function(t){t===window?t.scrollTo(0,this.scrollPosition):t.scrollTop=this.scrollPosition}},{key:"_setWindowScrollPosition",value:function(){document.documentElement.scrollTop=this.scrollPosition,document.body.scrollTop=this.scrollPosition}},{key:"_setScrollPositionWhenFixed",value:function(){this.element.scrollTop=this.scrollPosition}},{key:"activate",value:function(){this.position=[0,0],this.element.classList.remove(this.classes.frozen,this.classes.fixed),this.element.classList.remove(this._getOrderClass(this.originClass)),this.element.classList.add(this.classes.active),this._setWindowScrollPosition(),this.element.classList.remove(this.originClass)}},{key:"deactivate",value:function(){this._storeScrollPosition(),this.position=this.origin,this.element.classList.add(this.classes.frozen,this.classes.fixed,this._getOrderClass(this.originClass)),this.element.classList.remove(this.classes.active),this._setScrollPositionWhenFixed(),this.element.classList.add(this.originClass)}},{key:"retriveOrigin",value:function(){return Array.from(this.origin)}},{key:"updatePosition",value:function(t){this.position=t}},{key:"originClass",get:function(){return this._getPositionClass(this.retriveOrigin())}}]),n}(),t=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"_init",value:function(){this.element.classList.add(this.classes.active)}},{key:"_oppositeCoordinantes",value:function(t){for(var e=t,n=0;n<e.length;n++)0!==e[n]&&(e[n]*=-1);return e}},{key:"activate",value:function(){var t=this._getPositionClass(this.position);this.position=[0,0],this.element.classList.remove(this.classes.frozen,this.classes.fixed,this._getOrderClass(t)),this.element.classList.add(this.classes.active),this._setWindowScrollPosition(),this.element.classList.remove(t)}},{key:"deactivate",value:function(t){this._storeScrollPosition(),this.position=this._oppositeCoordinantes(t);var e=this._getPositionClass(this.position);this.element.classList.add(this.classes.frozen,this.classes.fixed,this._getOrderClass(e)),this.element.classList.remove(this.classes.active),this._setScrollPositionWhenFixed(),this.element.classList.add(e)}}]),t}(),n=function(){function i(t,e){var n;return _classCallCheck(this,i),(n=_possibleConstructorReturn(this,_getPrototypeOf(i).call(this,t,e))).inject=new Gingabulous.Inject(t),n}return _inherits(i,e),i}(),i=function(){function i(t,e){var n;return _classCallCheck(this,i),(n=_possibleConstructorReturn(this,_getPrototypeOf(i).call(this,t,e))).debug=new Gingabulous.Debug("CarouselPane"),n.carousel=n.element.querySelector("[data-carousel-panes]"),n.titleBar=n.element.querySelector(".pane-carousel-title-bar"),n._events(),n}return _inherits(i,e),_createClass(i,[{key:"_goToPane",value:function(t){var e;"left"===t&&(e="translateX(0)"),"center"===t&&(e=""),"right"===t&&(e="translateX(-200%)"),this.carousel.style.transform=e,this.titleBar.style.transform=e}},{key:"_events",value:function(){var n=this,i="data-panes-nav";this.element.addEventListener("click",function(t){if(t.target.hasAttribute(i)){var e=t.target.getAttribute(i);"left"===e&&(n._goToPane("left"),n.debug.message("left movement triggered")),"center"===e&&(n._goToPane("center"),n.debug.message("center movement triggered")),"right"===e&&(n._goToPane("right"),n.debug.message("right movement triggered"))}})}}]),i}();Gingabulous.registerModule(e,"Pane"),Gingabulous.registerModule(t,"HomePane"),Gingabulous.registerModule(n,"DynamicPane"),Gingabulous.registerModule(i,"CarouselPane")}(),function(){var t=function(){function n(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};_classCallCheck(this,n),this.element=t,this.options=Gingabulous.deepExtend({},this.defaults,e),this.classes=this.options.classes,this.state={active:"home",previous:!1},this.panes={}}return _createClass(n,[{key:"init",value:function(){this._registerPanes(),this._events()}},{key:"_updateState",value:function(t){this.state.active!==t&&(this.state.previous=this.state.active,this.state.active=t,this._updatePositions())}},{key:"_updatePositions",value:function(){"home"===this.state.previous?this.panes[this.state.previous].deactivate(this.panes[this.state.active].retriveOrigin()):this.panes[this.state.previous].deactivate(),this.panes[this.state.active].activate()}},{key:"_registerPanes",value:function(){for(var t=this.element.querySelectorAll(this.target.pane),e=0;e<t.length;e++){var n=t[e].getAttribute(this.attr.pane);""!==n&&"home"!==n&&(t[e].querySelector("[data-carousel-panes]")?this.panes[n]=new Gingabulous.CarouselPane(t[e],this.options):this.panes[n]=new Gingabulous.Pane(t[e],this.options)),"home"===n&&(this.panes[n]=new Gingabulous.HomePane(t[e],this.options))}}},{key:"_events",value:function(){var i=this;this.element.addEventListener("click",function(t){if(t.target.hasAttribute(i.attr.open)){var e=t.target.getAttribute(i.attr.open);if(i.panes[e].responsive.isActive()&&i._updateState(e),t.target.hasAttribute("data-inject")){var n=t.target.getAttribute("data-inject");i.panes[e].inject.updateContent(n)}}t.target.hasAttribute(i.attr.close)&&i._updateState("home")})}},{key:"defaults",get:function(){return{dataAttr:Gingabulous.modules.Panes.dataAttr,paneDataAttr:"data-pane",translateDistance:100,classes:{panes:"panes",pane:"pane",frozen:"frozen-pane",fixed:"fixed-pane",active:"active",left:"left",right:"right",above:"above",below:"below"}}}},{key:"attr",get:function(){return{parent:this.options.dataAttr,main:"".concat(this.options.paneDataAttr,"-home"),pane:this.options.paneDataAttr,open:"".concat(this.options.paneDataAttr,"-open"),close:"".concat(this.options.paneDataAttr,"-close")}}},{key:"target",get:function(){return{parent:"[".concat(this.options.dataAttr,"]"),main:"[".concat(this.options.paneDataAttr,"-home]"),pane:"[".concat(this.options.paneDataAttr,"]"),open:"[".concat(this.options.paneDataAttr,"-open]"),close:"[".concat(this.options.paneDataAttr,"-close]")}}}]),n}();Gingabulous.registerModule(t,"Panes")}(),Gingabulous.registerGlobalEventListener("resize",window),Gingabulous.Debug.config(!0,{Pane:!0,DynamicPane:!0,CarouselPane:!0}),Gingabulous.registerAnimation("expandingTabs",function(t){if(!t.querySelector(".animation_border-left")){var e=document.createElement("div"),n=t.querySelector(".titled-callout-heading");e.classList.add("animation_border-left"),t.insertBefore(e,n)}var i=document.querySelector(".site-inner main.content"),o=t.getAttribute("data-expand"),s="animation_expanding-tabs",a="".concat(s,"_expand"),r="".concat(s,"_collapse"),l=t.getBoundingClientRect().top;i.classList.add("animation_expanding-tabs_in-progress"),"expanded"===o&&(i.classList.add("animation_expanding-tabs_tab-active"),t.classList.remove("".concat(r,"_collapse-border_transition"),"".concat(r,"_collapse-border_animate")),t.classList.remove("".concat(r,"_shift-down_transition"),"".concat(r,"_shift-down_animate")),Gingabulous.animationSeries(t,"expanding-tabs_expand",{after:function(){i.classList.remove("animation_expanding-tabs_in-progress")}},["shift-up",600,function(t){t.style.transform="translate3d(0, -".concat(l-40,"px, 0)")}],["expand-border",400])),"collapsed"===o&&(t.classList.remove("".concat(a,"_shift-up_transition"),"".concat(a,"_shift-up_animate")),t.classList.remove("".concat(a,"_expand-border_transition"),"".concat(a,"_expand-border_animate")),Gingabulous.animationSeries(t,"expanding-tabs_collapse",{after:function(){i.classList.remove("animation_expanding-tabs_tab-active"),i.classList.remove("animation_expanding-tabs_in-progress")}},["collapse-border",400],["shift-down",600,function(t){t.style.transform=null}]))}),Gingabulous.registerAnimation("expandingCards",function(t){var e=t.getAttribute("data-expand"),n={borderLeft:t.querySelector(".border-left"),optionsBar:t.querySelector(".card-options-bar"),cover:t.querySelector(".card-cover"),bottomContainer:t.querySelector(".bottom-container")};"expanded"===e&&Gingabulous.animationSeries(t,"expanding-cards_expand",!1,["expanding",400,function(t){t.style.marginTop=0,t.style.marginBottom=0,n.borderLeft.style.height="".concat(t.offsetHeight-10,"px"),n.borderLeft.style.marginTop=null}]),"collapsed"===e&&Gingabulous.animationSeries(t,"expanding-cards_collapse",!1,["collapsing_pre-height",400,function(t){t.style.marginTop="-".concat(n.optionsBar.offsetHeight,"px"),t.style.marginBottom="-".concat(n.bottomContainer.offsetHeight,"px"),n.borderLeft.style.height="".concat(n.cover.offsetHeight,"px"),n.borderLeft.style.marginTop="".concat(n.optionsBar.offsetHeight,"px")}])},function(t){var e={borderLeft:t.querySelector(".border-left"),optionsBar:t.querySelector(".card-options-bar"),cover:t.querySelector(".card-cover"),bottomContainer:t.querySelector(".bottom-container")};t.style.marginTop="-".concat(e.optionsBar.offsetHeight,"px"),t.style.marginBottom="-".concat(e.bottomContainer.offsetHeight,"px"),e.borderLeft.style.height="".concat(e.cover.offsetHeight,"px"),e.borderLeft.style.marginTop="".concat(e.optionsBar.offsetHeight,"px")}),Gingabulous.animationSeries(document.querySelector(".loading-screen"),"loading-screen",{before:function(t){t.classList.remove(".loading")},after:function(t){t.classList.add("loading-complete")}},["in",200],["loading",600],["out",200]),function(){var t=document.querySelector(Gingabulous.modules.Panes.dataAttrTarget);new Gingabulous.Panes(t).init();var e=document.querySelector(Gingabulous.modules.Background.dataAttrTarget);new Gingabulous.Background(e).init();for(var n=document.querySelectorAll(Gingabulous.modules.Expand.dataAttrTarget),i=0;i<n.length;i++)new Gingabulous.Expand(n[i]).init()}();var recaptchaOnLoadCallback=function(){var t=document.querySelectorAll(".recaptcha");console.log("Look at me!"),console.log(t);for(var e=0;e<t.length;e++)console.log(t[e].attributes.id),grecaptcha.render(t[e],{sitekey:"6LcpNbAZAAAAAHfgedRaf3SdTgjiWjoS4NGSUTNq",theme:"dark"})};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,