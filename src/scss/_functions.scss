////
/// Functions
///
/// @since 0.1.0
///

////
/// Z-Index
///
/// See `$z-indexes` in _settings.scss for proper values to pass to this function.
///
/// @since 1.0.0
///
/// @param {String} $name - Name of z-index to use within `$z-indexes` array.
///
/// @return {Integer} corresponding number to passed string or null.
///
@function z($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name)) + 1;
  }

  @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';

    @return null;
  }
}

////
/// Convert pixels to rems.
///
/// @since 1.0.0
///
/// @param {Pixel} $size - Pixel value to convert to rems.
///
/// @return {Rem} Converted rem value.
///
@function to-rem($_size) {

  $_remSize: $_size / 16;

  @return $_remSize * 1rem;
}
// TODO Document contains function.
@function contains($_list, $_var) {
  $_out: false;

  @each $_item in $_list {
    @if $_item == $_var {
      $_out: true;
    }
  }

  @return $_out;
}

////
/// Apply Golden Ratio at 10 levels
///
/// This can be used to incimentally increase from the base value, or decrease.
///
/// @since 1.0.0
///
/// @param {Integer} $base     - The base value for the golden ratio to be applied to.
/// @param {Integer} $level    - The level of incriment to be applied.
/// @param {Boolean} $decrease - Whether to assend or descend from the base value.
///                              Default is `true`.
///
/// @return {integer} - The new value with the golden ratio applied according to the
///                     level passed.
@function gld($base, $level, $decrease: true) {

  $golden: 1.618;

  @if $level <= 10 && $level != 0 {
    @if $decrease {

      $gld10: $base / $golden;
      $gld9: $base - $gld10;
      $gld8: $gld9 / $golden;
      $gld7: $gld9 - $gld8;
      $gld6: $gld7 / $golden;
      $gld5: $gld7 - $gld6;
      $gld4: $gld5 / $golden;
      $gld3: $gld5 - $gld4;
      $gld2: $gld3 / $golden;
      $gld1: $gld3 - $gld2;

      $glds: (
        gld10: $gld10,
        gld9:  $gld9,
        gld8:  $gld8,
        gld7:  $gld7,
        gld6:  $gld6,
        gld5:  $gld5,
        gld4:  $gld4,
        gld3:  $gld3,
        gld2:  $gld2,
        gld1:  $gld1,
      );

      @return map-get($glds, gld#{$level});
    }

    @else {

      $gld10: $base * $golden;
      $gld9: $base + $gld10;
      $gld8: $gld9 * $golden;
      $gld7: $gld9 + $gld8;
      $gld6: $gld7 * $golden;
      $gld5: $gld7 + $gld6;
      $gld4: $gld5 * $golden;
      $gld3: $gld5 + $gld4;
      $gld2: $gld3 * $golden;
      $gld1: $gld3 + $gld2;

      $glds: (
        gld10: $gld10,
        gld9:  $gld9,
        gld8:  $gld8,
        gld7:  $gld7,
        gld6:  $gld6,
        gld5:  $gld5,
        gld4:  $gld4,
        gld3:  $gld3,
        gld2:  $gld2,
        gld1:  $gld1,
      );

      @return map-get($glds, gld#{$level});
    }
  }

  @else {
    @warn '"#{$level}" is an invalid value. Please choose a number between 1 and 10.';

    @return null;
  }
}

////
/// Remove the unit of a length.
///
/// @since 1.0.0
///
/// @param {Number} $number - Number to remove unit from
/// @return {Number}        - Unitless number
///
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
// TODO Document breakpoint function.
@function bp($bp, $min-max: min) {

  $bf: strip-unit($font-size_base);
  $em: $bp / $bf;
  $media: false;

  @if $em != 0 {
    $media: '#{$min-max}-width: #{$em}em';
  }

  @return $media;
}
